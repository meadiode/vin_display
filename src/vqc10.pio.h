// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----------------- //
// push_display_data //
// ----------------- //

#define push_display_data_wrap_target 0
#define push_display_data_wrap 2

static const uint16_t push_display_data_program_instructions[] = {
            //     .wrap_target
    0x6008, //  0: out    pins, 8                    
    0xc024, //  1: irq    wait 4                     
    0xc024, //  2: irq    wait 4                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program push_display_data_program = {
    .instructions = push_display_data_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config push_display_data_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + push_display_data_wrap_target, offset + push_display_data_wrap);
    return c;
}
#endif

// ------------- //
// drive_display //
// ------------- //

#define drive_display_wrap_target 0
#define drive_display_wrap 11

static const uint16_t drive_display_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32                      
    0x20c4, //  1: wait   1 irq, 4                   
    0x6510, //  2: out    pins, 16               [5] 
    0x6010, //  3: out    pins, 16                   
    0x20c4, //  4: wait   1 irq, 4                   
    0x0041, //  5: jmp    x--, 1                     
    0x6030, //  6: out    x, 16                      
    0x6050, //  7: out    y, 16                      
    0x6010, //  8: out    pins, 16                   
    0x0049, //  9: jmp    x--, 9                     
    0x6010, // 10: out    pins, 16                   
    0x008b, // 11: jmp    y--, 11                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program drive_display_program = {
    .instructions = drive_display_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config drive_display_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + drive_display_wrap_target, offset + drive_display_wrap);
    return c;
}

#define VQC10_PIO_PUSH_DATA_SM   0
#define VQC10_PIO_CTRL_SEQ_SM    1
#define VQC10_PIO_SM_MASK ((1 << VQC10_PIO_PUSH_DATA_SM) | \
                           (1 << VQC10_PIO_CTRL_SEQ_SM))
static inline void vqc10_program_init(PIO pio)
{
    uint8_t i;
    for (i = 0; i < VQC_DATA_NUM_PINS; i++)
    {
        pio_gpio_init(pio, VQC_DATA_START_PIN + i);
    }
    for (i = 0; i < VQC_CTRL_NUM_PINS; i++)
    {
        switch (VQC_CTRL_START_PIN + i)
        {
        case VQC_CTRL_NC1_PIN:
        case VQC_CTRL_NC2_PIN:
            break;
        default:
            pio_gpio_init(pio, VQC_CTRL_START_PIN + i);   
            break;
        }
    }
    pio_sm_set_consecutive_pindirs(pio, VQC10_PIO_PUSH_DATA_SM,
                                   VQC_DATA_START_PIN, VQC_DATA_NUM_PINS, true);
    pio_sm_set_consecutive_pindirs(pio, VQC10_PIO_CTRL_SEQ_SM,
                                   VQC_CTRL_START_PIN, VQC_CTRL_NUM_PINS, true);
    pio_sm_config c;
    uint offs0 = pio_add_program(pio, &push_display_data_program);
    c = push_display_data_program_get_default_config(offs0);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_out_pins(&c, VQC_DATA_START_PIN, VQC_DATA_NUM_PINS);
    sm_config_set_clkdiv(&c, 25.0);
    pio_sm_init(pio, VQC10_PIO_PUSH_DATA_SM, offs0, &c);
    uint offs1 = pio_add_program(pio, &drive_display_program);
    c = drive_display_program_get_default_config(offs1);
    sm_config_set_out_shift(&c, true, true, 32);
    sm_config_set_out_pins(&c, VQC_CTRL_START_PIN, VQC_CTRL_NUM_PINS);
    sm_config_set_clkdiv(&c, 25.0);
    pio_sm_init(pio, VQC10_PIO_CTRL_SEQ_SM, offs1, &c);
    pio_set_sm_mask_enabled(pio, VQC10_PIO_SM_MASK, true);
}

#endif

