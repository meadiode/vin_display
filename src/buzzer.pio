
; Play a sound using variable period PWM cycles
;
; To play a single tone, the out FIFO should contain 3 numbers:
;    1 - 32 bit - total number of PWM cycles
;    2 - 16 bit - length of the on period of a single cycle
;    3 - 16 bit - lenght of the off period of a single cycle

.program buzzer
.side_set 1

.wrap_target
    pull                    side 0
    out x, 32               side 0 ; X contains the total number of cycles
    pull                    side 0
    out isr, 32             side 0 ; ISR contains length of both: on and  
                                   ; off periods

duration_loop:
    mov osr, isr            side 0 ; reload OSR with period lengths
    out y, 16               side 0 ; load on-period length

duty_loop_h:
    jmp y--, duty_loop_h    side 1 ; count the on-period

    out y, 16               side 0 ; load length of the off-period to Y 

duty_loop_l:  
    jmp y--, duty_loop_l    side 0 ; count the off-period

    jmp x--, duration_loop  side 0 ; on to the next cycle

.wrap

% c-sdk {

#include "hardware/clocks.h"

#define BUZZER_PIO_SM 3

static inline void buzzer_program_init(PIO pio, uint buzzer_pin)
{
    pio_gpio_init(pio, buzzer_pin);

    pio_sm_set_consecutive_pindirs(pio, BUZZER_PIO_SM, buzzer_pin, 1, true);
    
    pio_sm_config c;

    uint offs0 = pio_add_program(pio, &buzzer_program);
    c = buzzer_program_get_default_config(offs0);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_sideset_pins(&c, buzzer_pin);
    sm_config_set_clkdiv(&c, 125.0); /* 1 MHz */
    pio_sm_init(pio, BUZZER_PIO_SM, offs0, &c);

    pio_sm_set_enabled(pio, BUZZER_PIO_SM, true);
}

%}