// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// encoder //
// ------- //

#define encoder_wrap_target 0
#define encoder_wrap 19

static const uint16_t encoder_program_instructions[] = {
            //     .wrap_target
    0xa0c3, //  0: mov    isr, null                  
    0x4002, //  1: in     pins, 2                    
    0xa026, //  2: mov    x, isr                     
    0xe041, //  3: set    y, 1                       
    0x00a6, //  4: jmp    x != y, 6                  
    0x0008, //  5: jmp    8                          
    0xe042, //  6: set    y, 2                       
    0x00a0, //  7: jmp    x != y, 0                  
    0xa0c3, //  8: mov    isr, null                  
    0x4002, //  9: in     pins, 2                    
    0xa026, // 10: mov    x, isr                     
    0x002e, // 11: jmp    !x, 14                     
    0x00a0, // 12: jmp    x != y, 0                  
    0x0008, // 13: jmp    8                          
    0xe021, // 14: set    x, 1                       
    0x00b3, // 15: jmp    x != y, 19                 
    0xc004, // 16: irq    nowait 4                   
    0xc000, // 17: irq    nowait 0                   
    0x0000, // 18: jmp    0                          
    0xc000, // 19: irq    nowait 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program encoder_program = {
    .instructions = encoder_program_instructions,
    .length = 20,
    .origin = -1,
};

static inline pio_sm_config encoder_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + encoder_wrap_target, offset + encoder_wrap);
    return c;
}

#define KNOB_PIO_ENCODER_SM 0
static inline void knob_program_init(PIO pio, uint enc_pins_base)
{
    pio_gpio_init(pio, enc_pins_base);
    pio_gpio_init(pio, enc_pins_base + 1);
    pio_sm_set_consecutive_pindirs(pio, KNOB_PIO_ENCODER_SM,
                                   enc_pins_base, 2, false);
    pio_sm_config c;
    uint offs0 = pio_add_program(pio, &encoder_program);
    c = encoder_program_get_default_config(offs0);
    sm_config_set_in_pins(&c, enc_pins_base);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_in_shift(&c, false, false, 32);    
    sm_config_set_clkdiv(&c, 125.0);
    pio_sm_init(pio, KNOB_PIO_ENCODER_SM, offs0, &c);
    pio_sm_set_enabled(pio, KNOB_PIO_ENCODER_SM, true);
}

#endif

