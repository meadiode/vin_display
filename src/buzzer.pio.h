// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// buzzer //
// ------ //

#define buzzer_wrap_target 0
#define buzzer_wrap 6

static const uint16_t buzzer_program_instructions[] = {
            //     .wrap_target
    0x6020, //  0: out    x, 32           side 0     
    0x60c0, //  1: out    isr, 32         side 0     
    0xa046, //  2: mov    y, isr          side 0     
    0x1083, //  3: jmp    y--, 3          side 1     
    0xa046, //  4: mov    y, isr          side 0     
    0x0085, //  5: jmp    y--, 5          side 0     
    0x0042, //  6: jmp    x--, 2          side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program buzzer_program = {
    .instructions = buzzer_program_instructions,
    .length = 7,
    .origin = -1,
};

static inline pio_sm_config buzzer_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + buzzer_wrap_target, offset + buzzer_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
#define BUZZER_PIO_SM 3
static inline void mdl2416c_program_init(PIO pio, uint buzzer_pin)
{
    pio_gpio_init(pio, buzzer_pin);
    pio_sm_set_consecutive_pindirs(pio, BUZZER_PIO_SM, buzzer_pin, 1, true);
    pio_sm_config c;
    uint offs0 = pio_add_program(pio, &buzzer_program);
    c = buzzer_program_get_default_config(offs0);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_in_shift(&c, false, false, 32);
    sm_config_set_sideset_pins(&c, buzzer_pin);
    sm_config_set_clkdiv(&c, 125.0);
    pio_sm_init(pio, BUZZER_PIO_SM, offs0, &c);
    pio_sm_set_enabled(pio, BUZZER_PIO_SM, true);
}

#endif

