
.program display_char

; sets character data pins
.wrap_target
    out pins, 8                              ; output a character
    irq wait  4                              ; let the select_display program to pull the WR pin 
    irq wait  4                              ; wait till the select_display program is done with the current character
.wrap


; sets character address pins
.program select_char
.wrap_target
    set x, 0                                 ; X contains character index(address)

next_char:
    mov pins, x                              ; configure the pins for the current character position

    irq wait 5                               ; let the select_display program to pull the WR pin 
    irq wait 5                               ; wait till the select_display program is done with the current character

    mov y, !x                                ; increment X through negating and decrement and negating again
    jmp y--, next_char_cont
next_char_cont:
    mov x, !y

    set y, 8                                 ; check if X reached 8
    jmp x != y, next_char                    ; if yes, then wrap
.wrap


; sets display CE pins and triggers writing
.program select_display_and_write_chars
.side_set 1
.wrap_target   
    set x, 0              side 1             ; X contains display index

next_disp:
    set y, 7              side 1             ; Y counts characters in the current display

display_char:
    wait 1 irq 4          side 1             ; wait till character address and data pins are configured
    wait 1 irq 5          side 1

    mov pins, x           side 1 [10]        ; pull CE and WR pins, so a character is written
    nop                   side 0 [10]
    set pins, 7           side 1 [10]

    wait 1 irq 4          side 1             ; let set data and address for the next character
    wait 1 irq 5          side 1             

    jmp y--, display_char side 1             ; if Y is not 0 yet, then onto the next character
                                             ; else, increment X to select the next display
    mov y, !x             side 1             
    jmp y--, inc_x_cont   side 1
inc_x_cont:
    mov x, !y             side 1

    set y, 6              side 1             ; check if X reached number of displays(6)
    jmp x != y, next_disp side 1             ; if yes, then start over with the ffirst display
.wrap


% c-sdk {

#include "hardware/clocks.h"

#define HDSP2112_PIO_DISPLAY_CHAR_SM       0
#define HDSP2112_PIO_SELECT_CHAR_SM        1
#define HDSP2112_PIO_SELECT_DISPLAY_SM     2


#define HDSP2112_PIO_DISP_SM_MASK ((1 << HDSP2112_PIO_DISPLAY_CHAR_SM) | \
                                   (1 << HDSP2112_PIO_SELECT_CHAR_SM) | \
                                   (1 << HDSP2112_PIO_SELECT_DISPLAY_SM))

static inline void hdsp2112_program_init(PIO pio)
{

    uint8_t i;

    for (i = 0; i < HDSP_DATA_PINS_NUM; i++)
    {
        pio_gpio_init(pio, HDSP_DATA_START_PIN + i);
    }

    for (i = 0; i < HDSP_ADDR_PINS_NUM; i++)
    {
        pio_gpio_init(pio, HDSP_ADDR_START_PIN + i);
    }

    for (i = 0; i < HDSP_CE_PINS_NUM; i++)
    {
        pio_gpio_init(pio, HDSP_CE_START_PIN + i);
    }

    pio_gpio_init(pio, HDSP_WR_PIN);

    pio_sm_set_consecutive_pindirs(pio, HDSP2112_PIO_DISPLAY_CHAR_SM,
                                   HDSP_DATA_START_PIN, HDSP_DATA_PINS_NUM,
                                   true);
    pio_sm_set_consecutive_pindirs(pio, HDSP2112_PIO_SELECT_CHAR_SM,
                                   HDSP_ADDR_START_PIN, HDSP_ADDR_PINS_NUM,
                                   true);
    pio_sm_set_consecutive_pindirs(pio, HDSP2112_PIO_SELECT_DISPLAY_SM,
                                   HDSP_CE_START_PIN, HDSP_CE_PINS_NUM,
                                   true);
    pio_sm_set_consecutive_pindirs(pio, HDSP2112_PIO_SELECT_DISPLAY_SM,
                                   HDSP_WR_PIN, 1, true);

    pio_sm_config c;
    
    uint offs0 = pio_add_program(pio, &display_char_program);
    c = display_char_program_get_default_config(offs0);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_out_pins(&c, HDSP_DATA_START_PIN, HDSP_DATA_PINS_NUM);
    sm_config_set_clkdiv(&c, 4.0);
    pio_sm_init(pio, HDSP2112_PIO_DISPLAY_CHAR_SM, offs0, &c);

    uint offs1 = pio_add_program(pio, &select_char_program);
    c = select_char_program_get_default_config(offs1);
    sm_config_set_out_shift(&c, false, false, 32);
    sm_config_set_out_pins(&c, HDSP_ADDR_START_PIN, HDSP_ADDR_PINS_NUM);
    sm_config_set_clkdiv(&c, 4.0);
    pio_sm_init(pio, HDSP2112_PIO_SELECT_CHAR_SM, offs1, &c);

    uint offs2 = pio_add_program(pio, &select_display_and_write_chars_program);
    c = select_display_and_write_chars_program_get_default_config(offs2);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_out_pins(&c, HDSP_CE_START_PIN, HDSP_CE_PINS_NUM);
    sm_config_set_set_pins(&c, HDSP_CE_START_PIN, HDSP_CE_PINS_NUM);
    sm_config_set_sideset_pins(&c, HDSP_WR_PIN);
    sm_config_set_clkdiv(&c, 4.0);
    pio_sm_init(pio, HDSP2112_PIO_SELECT_DISPLAY_SM, offs2, &c);

    pio_set_sm_mask_enabled(pio, HDSP2112_PIO_DISP_SM_MASK, true);
}

%}

